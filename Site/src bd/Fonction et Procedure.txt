
DROP FUNCTION nbCaisseDe24parNoLivraison;
DROP FUNCTION NOUVNOCOMMANDE;
DROP FUNCTION trouveNoLivraison;
DROP PROCEDURE INSERT_TABLE_COMMANDE;
DROP PROCEDURE AJOUT_QUANTITE;
DROP FUNCTION PLACER_DATELIVRAISON;
--=====================================================================
--Cette fonction prend un no de livraison retourne en caisse de 24 
--le nombre de caisses commandées dans un no de livraison 
--(i.e. le nombre de caisse déja inclu dans un camion)
--***Attention le no Livraison doit d'abord etre valider en javaScript
--=====================================================================
create or replace FUNCTION nbCaisseDe24parNoLivraison(noLiv VUE_DETAIL_LIVRAISON.qtlivree%TYPE)
    RETURN integer IS
    nbCaisse    VUE_DETAIL_LIVRAISON.qtlivree%TYPE :=0;
    nbCommande  VUE_DETAIL_LIVRAISON.nocommande%TYPE;
BEGIN
    SELECT SUM(nb_unites)
    INTO   nbCaisse
    FROM   VUE_DETAIL_LIVRAISON VDL
    WHERE  VDL.nolivraison = noLiv;
     -- Verifier si le noLivraison contient au moins une commande
        SELECT COUNT(nocommande) INTO nbCommande 
        FROM  VUE_DETAIL_LIVRAISON VDL
        WHERE  VDL.nolivraison = noLiv; 
	IF nbCommande = 0 THEN 
           nbCaisse := 0;
  ELSIF nbCaisse < 24 THEN
        nbCaisse := 1;
    ELSE 
        nbCaisse := nbCaisse /24;
    END IF;
    
    RETURN nbCaisse;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
	DBMS_OUTPUT.PUT_LINE('noLivraison invalide'||noLiv);
END nbCaisseDe24parNoLivraison;
/

--=========Appel de fonction nbCaisseDe24parNoLivraison===========

SELECT nbCaisseDe24parNoLivraison(5000) FROM DUAL;
SELECT nbCaisseDe24parNoLivraison(5005) FROM DUAL; --PAS DE COMMANDE

--==========================================================
-- La fonction trouve le bon no de livraison en fonction de la region
--***Attention le no region doit d'abord etre valider en javaScript
--===========================================================
CREATE OR REPLACE FUNCTION trouveNoLivraison(noReg REGION.noregion%TYPE)
    RETURN integer IS
noLiv     LIVRAISON.nolivraison%TYPE;
BEGIN
        IF noReg = 10 THEN    --MTL-EST
           noLiv := 5000;
        ELSIF noReg = 20 THEN --MTL-OUEST
	         noLiv := 5003;
        ELSIF noReg = 30 THEN --LAVAL
          noLiv := 5001;
        ELSIF noReg = 40 THEN -- MONTEREGIE
	        noLiv := 5002;
        ELSIF noReg = 50 THEN --RIVENORD
          noLiv := 5005;
        ELSIF noReg = 60 THEN --LONGUEUIL
          noLiv := 5006;
        ELSIF noReg = 70 THEN --LANAUDIERE
	        noLiv := 5004;
        ELSE 
          noLiv := NULL;
        END IF;
        RETURN noLiv;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
	DBMS_OUTPUT.PUT_LINE('noLivraison invalide'||noLiv);
END trouveNoLivraison;

--========-- Appel de fonction trouveNoLivraison============
SELECT trouveNoLivraison(10) FROM DUAL;    --(noRegion 10)

--======================================================================
--fONCTION QUI DONNE UN NOUVEAU NO DE COMMANDE
--=======================================================================

create or replace FUNCTION NOUVNOCOMMANDE
RETURN integer AS
noCom    INTEGER:= 0;
BEGIN 
        SELECT MAX(noCommande)
        INTO   noCom
        FROM   COMMANDE;
RETURN nocom +1;
END NOUVNOCOMMANDE;
--==== Appel de foncion=========================
SELECT NOUVNOCOMMANDE FROM DUAL;


--======================================================================
--FONCTION QUI DONNE UN NOUVEAU NO DE Client
--=======================================================================

create or replace FUNCTION NOUVNOCLIENT
RETURN integer AS
noclient    INTEGER:= 0;
BEGIN 
        SELECT MAX(noClient)
        INTO   noCom
        FROM   COMMANDE;
RETURN noclient +1;
END NOUVNOCLIENT;
--==== Appel de foncion=========================
SELECT NOUVNOCLIENT FROM DUAL;

--======================================================================
--PROCEDURE QUI VA INSERER UNE NOUVELLE COMMANDE DANS TABLE COMMANDE
--=======================================================================
create or replace PROCEDURE INSERT_TABLE_COMMANDE(noClient  COMMANDE.noclient%TYPE) AS
nocom	    INTEGER:= 0;
uneDate     DATE;
confirm     char:= 'N';
verif	    INTEGER:= 0;
innexistant EXCEPTION;
BEGIN 
      nocom := NOUVNOCOMMANDE; -- Appel de fonction
      uneDate := CURRENT_DATE;
      SELECT COUNT(noclient)
      INTO verif
      FROM CLIENT
      WHERE CLIENT.noclient = noClient;

      IF verif = 0 THEN
           raise innexistant;
      ELSE
       insert into Commande values(nocom,noclient,uneDate,confirm);
      END IF;
EXCEPTION
      WHEN innexistant THEN
	          DBMS_OUTPUT.PUT_LINE('no client invalide');
      
END INSERT_TABLE_COMMANDE;
--======= Appel de procedure ==============
EXECUTE INSERT_TABLE_COMMANDE(10);  --(Client no 10);

--===================================================================================
--PROCEDURE QUI PREND UN NOPRODUIT ET UNE QUANTITE ET FAIT AJUSTEMENT QUANTITEENSTOCK
--=====================================================================================

create or replace PROCEDURE AJOUT_QUANTITE(produit PRODUIT.noPRODUIT%TYPE, 
                     qte PRODUIT.quantiteenstock%TYPE ) AS
verifProduit     INTEGER:=0;
innexistant      EXCEPTION;
qtePresente      INTEGER:=0;
BEGIN 
     SELECT COUNT(noproduit)
      INTO verifProduit
      FROM PRODUIT
      WHERE PRODUIT.noPRODUIT = produit;
      
      SELECT quantiteenstock
      INTO qtePresente
      FROM PRODUIT
      WHERE PRODUIT.noPRODUIT = produit;
      
      
       IF verifProduit = 0 THEN
           raise innexistant;
      ELSE
           UPDATE PRODUIT
           SET    quantiteenstock = qte +  qtePresente
           WHERE  PRODUIT.noproduit = produit;
      END IF;
EXCEPTION
    WHEN innexistant THEN
	          DBMS_OUTPUT.PUT_LINE('no produit invalide');

END AJOUT_QUANTITE;

--================ Appel de propcedure =================
execute AJOUT_QUANTITE(1000,20);

--=================================================================
--Cette fonction prend en parametre une date et un noLivraison
--Elle UPDATE la table LIVRAISON à la datelivraison du nolivraison
--et retoune un message qui confirm la mise-à-jour.
-- ******PS. Ne pas oublie de faire 
--ALTER SESSION SET NLS_DATE_FORMAT = 'DD/MM/YYYY';
--=================================================================

create or replace FUNCTION UPDATE_DATE_LIVRAISON (
       dateLiv LIVRAISON.datelivraison%TYPE,
       noLiv   LIVRAISON.nolivraison%TYPE)
RETURN VARCHAR2 IS
     PRAGMA AUTONOMOUS_TRANSACTION;
verifNoLiv integer:=0;
msg    varchar2(100):= '';
BEGIN
  
       SELECT count(nolivraison)
       INTO   verifNoLiv
       FROM   LIVRAISON LV
       WHERE  LV.nolivraison = noLiv;

       IF verifNoLiv = 0 THEN
            msg:='noLivraison invalide!';
       ELSE 
           UPDATE LIVRAISON
           SET    livraison.datelivraison = dateLiv
           WHERE  LIVRAISON.nolivraison = noLiv; 
           msg:= 'Modification complete';
           COMMIT;
       END IF;
RETURN msg;       
END UPDATE_DATE_LIVRAISON;

--==============  Appel de function =======================
select UPDATE_DATE_LIVRAISON('16/11/2014',5005) from dual;
